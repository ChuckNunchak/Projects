// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication1.Models;

namespace WebApplication1.Migrations
{
    [DbContext(typeof(RawMaterialsContext))]
    [Migration("20181227172243_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WebApplication1.Models.AcceptedRawMaterial", b =>
                {
                    b.Property<int>("AcceptedRawMaterialsID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Cost");

                    b.Property<DateTime>("DateAndTime");

                    b.Property<string>("Employee");

                    b.Property<int>("HumanResourcesDepartmentID");

                    b.Property<int>("NumberKG");

                    b.Property<int>("RawMaterialsID");

                    b.Property<string>("RoomOfStorage");

                    b.Property<int>("StoragesID");

                    b.Property<string>("StoragesID1");

                    b.Property<string>("TypeOfRawMaterials");

                    b.HasKey("AcceptedRawMaterialsID");

                    b.HasIndex("HumanResourcesDepartmentID");

                    b.HasIndex("RawMaterialsID");

                    b.HasIndex("StoragesID1");

                    b.ToTable("AcceptedRawMaterials");
                });

            modelBuilder.Entity("WebApplication1.Models.HumanResourceDepartment", b =>
                {
                    b.Property<int>("HumanResourcesDepartmentID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AcceptRawMaterials");

                    b.Property<string>("Initial");

                    b.Property<int>("LengthOfService");

                    b.HasKey("HumanResourcesDepartmentID");

                    b.ToTable("HumanResourcesDepartment");
                });

            modelBuilder.Entity("WebApplication1.Models.RawMaterial", b =>
                {
                    b.Property<int>("RawMaterialsID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("CostKG");

                    b.Property<string>("DescriptionOfRawMaterials");

                    b.Property<string>("RawMaterialsName");

                    b.Property<string>("ReceptionConditions");

                    b.Property<string>("StorageConditions");

                    b.HasKey("RawMaterialsID");

                    b.ToTable("RawMaterials");
                });

            modelBuilder.Entity("WebApplication1.Models.Storage", b =>
                {
                    b.Property<string>("StoragesID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DesignatedEmployee");

                    b.Property<float>("FillingPercentage");

                    b.Property<string>("InventoryNumber");

                    b.Property<string>("NameOfStorage");

                    b.Property<int>("SquareOfStorage");

                    b.Property<float>("Tonnage");

                    b.Property<int>("TypeOfStoragesID");

                    b.HasKey("StoragesID");

                    b.HasIndex("TypeOfStoragesID");

                    b.ToTable("Storages");
                });

            modelBuilder.Entity("WebApplication1.Models.TypeOfStorage", b =>
                {
                    b.Property<int>("TypeOfStoragesID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("FireProtection");

                    b.Property<float>("Humidity");

                    b.Property<string>("NameOfTypeOfStorages");

                    b.Property<bool>("SpecialEquipment");

                    b.Property<string>("TypesOfRawMaterialsInStorage");

                    b.HasKey("TypeOfStoragesID");

                    b.ToTable("TypeOfStorages");
                });

            modelBuilder.Entity("WebApplication1.Models.AcceptedRawMaterial", b =>
                {
                    b.HasOne("WebApplication1.Models.HumanResourceDepartment", "HumanResourceDepartment")
                        .WithMany("AcceptedRawMaterials")
                        .HasForeignKey("HumanResourcesDepartmentID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApplication1.Models.RawMaterial", "RawMaterial")
                        .WithMany("AcceptedRawMaterials")
                        .HasForeignKey("RawMaterialsID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApplication1.Models.Storage", "Storage")
                        .WithMany("AcceptedRawMaterials")
                        .HasForeignKey("StoragesID1");
                });

            modelBuilder.Entity("WebApplication1.Models.Storage", b =>
                {
                    b.HasOne("WebApplication1.Models.TypeOfStorage", "TypeOfStorage")
                        .WithMany("Storages")
                        .HasForeignKey("TypeOfStoragesID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
